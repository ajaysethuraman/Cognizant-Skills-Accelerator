# -*- coding: utf-8 -*-
"""Project 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12fktl83N7ahVTKOg0iQygz-Bf5RXLfOV

# **Project: Calculator with Exception Handling**
## By Ajay Sethuraman
## **Introduction**
In this project, we aim to build a user-friendly Python calculator that handles exceptions gracefully. The calculator will support basic operations such as addition, subtraction, multiplication, and division. We will enhance the functionality with input validation, specific exception handling for division, logging errors, and a structured user interface. By implementing this project, we will ensure that the program operates without crashes and provides informative feedback to the user when an error occurs.

**Step 1: Menu of Operations**

We will start by creating a menu of operations for the user to select from. The available options are addition, subtraction, multiplication, division, and exit.
"""

def display_menu():
    print("Welcome to the Error-Free Calculator!")
    print("Choose an operation:")
    print("1. Addition")
    print("2. Subtraction")
    print("3. Multiplication")
    print("4. Division")
    print("5. Exit")

"""**Step 2: Input Validation**

To ensure that the user enters valid numbers, we will use input validation. If the user enters an invalid input (non-numeric), we will catch the exception and prompt the user again.
"""

def get_number(prompt):
    while True:
        try:
            return float(input(prompt))
        except ValueError:
            print("Invalid input! Please enter a valid number.")

"""**Step 3: Division with Exception Handling**

For the division operation, we need to handle two specific exceptions:

* ZeroDivisionError: Raised when the user attempts to divide by zero.
* ValueError: Ensures that the inputs are numbers.
"""

import logging

# Configure logging to log errors to a file
logging.basicConfig(filename='error_log.txt', level=logging.ERROR)

def divide_numbers():
    try:
        num1 = get_number("Enter the first number: ")
        num2 = get_number("Enter the second number: ")
        if num2 == 0:
            raise ZeroDivisionError("Division by zero is not allowed.")
        result = num1 / num2
    except ZeroDivisionError as e:
        print(f"Oops! {e}")
        logging.error(f"ZeroDivisionError occurred: {e}")
    except ValueError:
        print("Invalid input! Please enter a valid number.")
        logging.error("ValueError occurred: Invalid input for division.")
    else:
        print(f"The result is {result}.")

"""The divide_numbers function will:

* Handle ZeroDivisionError by informing the user and logging the error.
* Handle ValueError if non-numeric input is provided.

**Step 4: Logging Errors (Bonus)**

To track and log errors, we will use the Python logging module. All errors will be logged to a file named error_log.txt.

The logging configuration is set up in the divide_numbers function above, and errors will be logged whenever an exception is caught.

**Step 5: User-Friendly Interface**

The program should prompt the user to choose an operation, perform the selected operation, and handle exceptions gracefully. We will implement the menu-driven interface using a while loop, where the user can select different operations or exit.
"""

def calculator():
    while True:
        display_menu()
        choice = input("Choose an operation: ")

        if choice == '1':
            num1 = get_number("Enter the first number: ")
            num2 = get_number("Enter the second number: ")
            print(f"The result is {num1 + num2}.")

        elif choice == '2':
            num1 = get_number("Enter the first number: ")
            num2 = get_number("Enter the second number: ")
            print(f"The result is {num1 - num2}.")

        elif choice == '3':
            num1 = get_number("Enter the first number: ")
            num2 = get_number("Enter the second number: ")
            print(f"The result is {num1 * num2}.")

        elif choice == '4':
            divide_numbers()  # Calls the division function that handles errors

        elif choice == '5':
            print("Goodbye!")
            break

        else:
            print("Invalid choice! Please select a valid option.")

# Start the calculator program
calculator()

"""1. Menu Display: The user is prompted with a menu to select the desired operation.
2. Input Validation: The get_number function ensures that only valid numbers are entered.
3. Operations: The program performs the addition, subtraction, multiplication, or division based on the user's choice.
4. Error Handling: Specific exceptions (e.g., ZeroDivisionError, ValueError) are handled, with appropriate feedback given to the user.
5. Logging: Errors are logged to a file named error_log.txt.

## **Conclusion**
In this project, we developed a Python calculator with robust exception handling. The program:

* Presents a user-friendly interface with clear prompts.
* Handles invalid inputs gracefully with input validation.
* Specifically handles exceptions like division by zero and invalid input.
* Logs errors for debugging and analysis, ensuring reliability.

This project demonstrates how to write fault-tolerant and user-friendly programs, essential for real-world applications.
"""

