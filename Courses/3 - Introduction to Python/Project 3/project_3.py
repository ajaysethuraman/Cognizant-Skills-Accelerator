# -*- coding: utf-8 -*-
"""Project 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16bpBb98xtl7yaTb52g_e4AcZjHK8acn0

# **Password Strength Checker**
## by Ajay Sethuraman
## **Introduction**
Passwords are essential for online security, but weak passwords can make accounts vulnerable to attacks. This project aims to develop a password strength checker that evaluates passwords based on specific security criteria. The program will provide feedback to users, helping them create stronger passwords.
"""

password = input("Enter a password: ")

"""The program will check the password against the following criteria:
* At least 8 characters long
* Contains at least one uppercase letter
* Contains at least one lowercase letter
* Contains at least one digit
* Contains at least one special character (e.g., @, #, $, %, &)

We will use Python string methods like .isupper(), .islower(), and .isdigit() to validate these conditions.
"""

import string

def check_password_strength(password):
    special_characters = string.punctuation  # Includes symbols like @, #, $, etc.

    # Checking password criteria
    length_valid = len(password) >= 8
    has_upper = any(char.isupper() for char in password)
    has_lower = any(char.islower() for char in password)
    has_digit = any(char.isdigit() for char in password)
    has_special = any(char in special_characters for char in password)

    # Collecting missing elements
    missing_elements = []
    if not length_valid:
        missing_elements.append("at least 8 characters")
    if not has_upper:
        missing_elements.append("one uppercase letter")
    if not has_lower:
        missing_elements.append("one lowercase letter")
    if not has_digit:
        missing_elements.append("one digit")
    if not has_special:
        missing_elements.append("one special character")

    # Providing feedback
    if not missing_elements:
        print("Your password is strong! 💪")
    else:
        print("Your password needs:", ", ".join(missing_elements))

# Taking input from the user
password = input("Enter a password: ")
check_password_strength(password)

"""To make the program more interactive, we can assign a strength score out of 10 based on how many criteria the password meets."""

def password_strength_meter(password):
    special_characters = string.punctuation

    # Checking password criteria
    criteria = [
        len(password) >= 8,
        any(char.isupper() for char in password),
        any(char.islower() for char in password),
        any(char.isdigit() for char in password),
        any(char in special_characters for char in password)
    ]

    # Calculating score (2 points per fulfilled criterion)
    score = sum(criteria) * 2

    # Displaying strength level
    if score == 10:
        strength = "Excellent 🔥"
    elif score >= 6:
        strength = "Good 👍"
    else:
        strength = "Weak ❌"

    print(f"Password Strength: {score}/10 - {strength}")

# Taking input from the user
password = input("Enter a password: ")
password_strength_meter(password)

"""## **Conclusion**
This project demonstrates how to evaluate password strength using string methods and logical conditions. By implementing a password strength meter, we make the program more user-friendly and engaging. Strengthening passwords is crucial for cybersecurity, and this tool helps users create more secure credentials.
"""

