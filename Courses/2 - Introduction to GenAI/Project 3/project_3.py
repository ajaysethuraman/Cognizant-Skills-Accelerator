# -*- coding: utf-8 -*-
"""Project_3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J_gkMsayVQOI-di7wHjLQPmjyy7gqozV
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import classification_report, roc_auc_score
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import tensorflow_datasets as tfds
dataset_name = "cats_vs_dogs"
dataset, info = tfds.load(dataset_name, as_supervised=True, with_info=True)

def preprocess(image, label):
    image = tf.image.resize(image, (128, 128)) / 255.0
    return image, label

dataset = dataset["train"].map(preprocess).shuffle(10000).batch(32).prefetch(1)

train_size = int(0.8 * info.splits["train"].num_examples)
train_data = dataset.take(train_size)
val_data = dataset.skip(train_size)

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(train_data, epochs=1, validation_data=val_data)

# It was seen that accuracy improved with more epochs (10 epochs were run) but for this demo, I have only demonstrated 1 epoch.

def plot_metrics(history):
    plt.figure(figsize=(12, 4))

    # Plot accuracy
    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='Train Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.title('Training and Validation Accuracy')

    # Plot loss
    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='Train Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.title('Training and Validation Loss')

    plt.show()

plot_metrics(history)

# Generate predictions
y_true, y_pred = [], []
for images, labels in val_data:
    y_true.extend(labels.numpy())
    y_pred.extend(model.predict(images).flatten())

y_pred_binary = np.array(y_pred) > 0.5

# Display classification report
print(classification_report(y_true, y_pred_binary))
print("AUC-ROC Score:", roc_auc_score(y_true, y_pred))