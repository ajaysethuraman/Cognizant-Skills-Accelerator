# -*- coding: utf-8 -*-
"""US 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17xdPMplSoXatLHyW9cbxQIaeedyA8nH_
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.datasets import fetch_openml
import random
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
data = fetch_openml(name="UCI-student-performance-mat", version=1, as_frame=True)
df = data.frame

X = df[features]

# Feature scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Applying K-means clustering
kmeans = KMeans(n_clusters=3, random_state=42)  # We choose 3 clusters for demonstration
df['cluster'] = kmeans.fit_predict(X_scaled)

# Visualizing the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['G1'], y=df['G2'], hue=df['cluster'], palette='Set1', s=100)
plt.title('Student Clustering Based on Performance Features (G1, G2)')
plt.xlabel('First Grade (G1)')
plt.ylabel('Second Grade (G2)')
plt.legend(title="Cluster")
plt.show()

# Cluster analysis
cluster_counts = df['cluster'].value_counts()
print(f"Cluster Distribution:\n{cluster_counts}")

# Cluster centers
centers = scaler.inverse_transform(kmeans.cluster_centers_)
print(f"\nCluster Centers:\n{centers}")