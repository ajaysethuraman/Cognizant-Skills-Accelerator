# -*- coding: utf-8 -*-
"""Project_4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lhtDT8DvCVUoSshgJgJfDa39ewMJa-59

# **Project: AI-Powered Text Completion**
## by Ajay Sethuraman

**Introduction**

This report outlines the development of an AI-powered text completion application using OpenAI's GPT model. The project aims to provide an interactive experience where users input prompts, and the AI generates relevant responses. By implementing this application, we explore the capabilities of generative AI and how different parameters influence text generation. The following sections break down the code, explaining its functionality and design choices.

Through this project, we will:

* Learn the basics of Generative AI and its working principles.

* Develop an application that interacts with a pre-trained AI model.

* Experiment with different inputs and evaluate AI-generated responses.
"""

!pip install openai python-dotenv

"""**1. Importing Required Libraries**

The script begins by importing necessary libraries. `openai` is used to interact with the GPT model, and `os` is required to handle environment variables for API key retrieval. Using environment variables ensures security by keeping sensitive credentials out of the source code. We can also save it in a variable if we are using platforms like Google Colab.
"""

import os
import openai
from dotenv import load_dotenv

OPENAI_API_KEY='OPENAI_API_KEY'
def get_api_key():
    """Retrieve API key from environment variable or prompt user."""
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        api_key = input("Enter your OpenAI API key: ")
    return api_key

"""**2. Retrieving the API Key**

This function first checks if an API key is stored in the environment variables. If not found, it prompts the user for manual input. This approach allows flexibility while maintaining security best practices.
"""

# Load API key from .env file
def load_api_key():
    load_dotenv()
    return os.getenv("OPENAI_API_KEY")

"""**3. Generating AI Text Completions**

This function handles text generation using OpenAI’s API. Key parameters include:

* `prompt`: The text input provided by the user.

* `model`: Specifies the pre-trained AI model (e.g., text-davinci-003).

* `max_tokens`: Defines the length of the AI’s response.

* `temperature`: Controls the randomness of the response (lower values make it more deterministic).

Error handling is implemented to catch and return API-related issues, ensuring smooth execution.
"""

def generate_text(prompt, model="text-davinci-003", max_tokens=100, temperature=0.7):
    """Generate text completion using OpenAI API."""
    openai.api_key = get_api_key()
    try:
        response = openai.Completion.create(
            engine=model,
            prompt=prompt,
            max_tokens=max_tokens,
            temperature=temperature
        )
        return response["choices"][0]["text"].strip()
    except Exception as e:
        return f"Error: {str(e)}"

"""**4. Interactive User Input Handling**

The main() function creates an interactive session where users input prompts. It includes:

* A loop that continuously accepts user input.

* A condition to exit when the user types 'exit'.

* Input validation to prevent empty prompts.

* Calls to generate_text() to fetch AI-generated responses.

This structure ensures a user-friendly experience, allowing seamless interaction with the AI.
"""

def main():
    """Interactive text completion application."""
    print("\nAI-Powered Text Completion\n")
    while True:
        prompt = input("Enter a prompt (or type 'exit' to quit): ")
        if prompt.lower() == 'exit':
            print("Goodbye!")
            break
        if not prompt.strip():
            print("Please enter a valid prompt.")
            continue
        result = generate_text(prompt)
        print("\nAI Response:\n", result, "\n")

if __name__ == "__main__":
    main()

"""**5. Running the Application**

This standard Python conditional ensures that the script runs only when executed directly, preventing unintended execution when imported as a module.

**Observations & Reflections**

Through testing, we found that adjusting parameters like `temperature` and `max_tokens` significantly affects the response style. Lower temperatures lead to more structured, predictable outputs, whereas higher values introduce more creativity. Additionally, handling API errors prevents abrupt failures, ensuring a smoother user experience.

**Conclusion**

This AI-powered text completion project demonstrates how to build an interactive AI application while considering security, usability, and customization. Future improvements could include a graphical interface, additional model options, or extended functionality like summarization and translation. By working with generative AI in this way, we gain deeper insights into its strengths and limitations, enhancing our understanding of modern AI applications.
"""

